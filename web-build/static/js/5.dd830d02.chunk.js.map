{"version":3,"sources":["screens/Schedule.tsx"],"names":["windowWidth","Dimensions","get","width","Schedule","timeline","useQuery","GET_SCHEDULE","variables","date","ISODateString","Date","data","loading","error","hour","length","useState","visible","setVisible","currentUserId","setCurrentUserId","style","styles","top","Action","icon","onPress","Content","title","pointerEvents","slice","map","item","schedule","classrooms","sort","a","b","name","classroom","lastValue","row","textAlign","parseInt","from","unit","to","gap","flexDirection","onTouchEnd","userId","user","id","backgroundColor","activity","ActivityTypes","INDIVIDUAL_LESSON","color","numberOfLines","fullName","hideModal","StyleSheet","create","marginTop","height","marginLeft","position","elevation","borderLeftColor","borderLeftWidth","borderBottomColor","borderBottomWidth","alignItems","borderRadius","margin","justifyContent","paddingHorizontal","flexWrap","left","right","paddingTop","zIndex"],"mappings":"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","file":"static/js/5.dd830d02.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {StyleSheet, View, Text, ScrollView, Dimensions} from \"react-native\";\nimport {Appbar, Surface, TextInput} from \"react-native-paper\";\nimport {ActivityTypes, ClassroomType} from \"../models/models\";\nimport {fullName, ISODateString} from \"../helpers/helpers\";\nimport {GET_SCHEDULE} from \"../api/operations/queries/schedule\";\nimport {useQuery} from \"@apollo/client\";\nimport UserInfo from \"../components/UserInfo\";\n\nconst windowWidth = Dimensions.get('window').width;\n\nexport default function Schedule() {\n  const timeline = ['', 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const {data, loading, error} = useQuery(GET_SCHEDULE, {\n    variables: {date: ISODateString(new Date())}\n  });\n  const hour = (windowWidth - 40) / (timeline.length - 1);\n  const [visible, setVisible] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState(0);\n\n  const showModal = (userId: number) => {\n    setCurrentUserId(userId);\n    setVisible(true);\n  };\n\n  const hideModal = () => setVisible(false);\n\n  return <>\n    <Appbar style={styles.top}>\n      <Appbar.Action icon=\"menu\" onPress={() => {}}/>\n      <Appbar.Content title=\"Розклад\"/>\n      <Appbar.Action icon=\"calendar-range\" onPress={() => {}}/>\n    </Appbar>\n    <View style={styles.timeline} pointerEvents='none'>\n      {timeline.slice(1).map(item => <Text style={{width: hour, ...styles.hour}}>{item}</Text>)}\n    </View>\n    <ScrollView style={styles.schedule}>\n      {!loading && !error && (data.classrooms as ClassroomType[])?.slice().sort((a, b) => {\n        return a.name - b.name\n      }).map(classroom => {\n        let lastValue = timeline[1] as number;\n        return <View style={styles.row}>\n          <Text style={{width: 40, textAlign: 'center'}}>{classroom.name}</Text>\n          {classroom.schedule.slice().sort((a, b) => {\n            return parseInt(a.from) - parseInt(b.from)\n          }).map(unit => {\n            const from = parseInt(unit.from);\n            const to = parseInt(unit.to);\n            const length = (to - from) * hour;\n            const gap = (from - lastValue) * hour;\n            lastValue = to;\n            return <View style={{flexDirection: 'row'}} onTouchEnd={() => showModal(unit.user.id)}>\n              <View style={{...styles.gap, width: gap}}/>\n              <Surface style={{\n                ...styles.item,\n                width: length,\n                backgroundColor: unit.activity === ActivityTypes.INDIVIDUAL_LESSON ? '#2b5dff' : '#ffc000'\n              }}>\n                <Text style={{color: '#fff'}} numberOfLines={1}>\n                  {fullName(unit.user, true)}\n                </Text>\n              </Surface>\n            </View>\n          })}\n        </View>\n      })}\n    </ScrollView>\n    {currentUserId ? <UserInfo userId={currentUserId} hideModal={hideModal} visible={visible}/> : null}\n  </>\n};\n\nconst styles = StyleSheet.create({\n  timeline: {\n    marginTop: 90,\n    height: '100%',\n    marginLeft: 40,\n    flexDirection: 'row',\n    position: 'absolute',\n    elevation: 10,\n  },\n  hour: {\n    borderLeftColor: 'rgba(221 ,221 ,221, .2)',\n    borderLeftWidth: 1\n  },\n  schedule: {\n    marginTop: 120,\n  },\n  row: {\n    flexDirection: 'row',\n    borderBottomColor: 'rgba(221 ,221 ,221, .5)',\n    borderBottomWidth: 1,\n    alignItems: 'center',\n  },\n  gap: {\n    height: 40,\n  },\n  item: {\n    borderRadius: 4,\n    elevation: 4,\n    margin: 1,\n    height: 40,\n    justifyContent: 'center',\n    paddingHorizontal: 8,\n    flexWrap: 'nowrap'\n  },\n  top: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    paddingTop: 26,\n    height: 80,\n    backgroundColor: '#2e287c',\n    zIndex: 1\n  },\n});"],"sourceRoot":""}